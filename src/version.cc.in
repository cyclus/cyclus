#include "version.h"

#include <cstring>
#include <sstream>

#include "CbcConfig.h"
#include "ClpConfig.h"
#include "boost/version.hpp"
#include "hdf5.h"
#include "libxml++config.h"
#include "libxml/xmlversion.h"
#include "sqlite3.h"

// required for coin-cbc v < 2.5
#ifndef CBC_VERSION
#define CBC_VERSION CBCVERSION
#endif

#define INNER(x) #x
#define SVER(x, y, z) INNER(x.y.z)

namespace cyclus {
namespace version {

static char h5version[15];

const char* describe() { return "@core_version@"; }

const char* core() {
  return SVER(CYCLUS_VERSION_MAJOR, CYCLUS_VERSION_MINOR, CYCLUS_VERSION_MICRO);
}

const char* boost() { return BOOST_LIB_VERSION; }

const char* sqlite3() { return SQLITE_VERSION; }

const char* hdf5() {
  if (std::string("") == h5version) {
    std::stringstream ss;
    ss << H5_VERS_MAJOR << ".";
    ss << H5_VERS_MINOR << ".";
    ss << H5_VERS_RELEASE << "-";
    ss << H5_VERS_SUBRELEASE;
    memset(h5version, 0, 15);
    memcpy(h5version, ss.str().c_str(), ss.str().size());
  }
  return h5version;
}

const char* xml2() { return LIBXML_DOTTED_VERSION; }

const char* xmlpp() {
#ifdef LIBXMLXX_MAJOR_VERSION
  return SVER(LIBXMLXX_MAJOR_VERSION, LIBXMLXX_MINOR_VERSION,
              LIBXMLXX_MICRO_VERSION);
#else
  return "<2.37";
#endif
}

const char* coincbc() { return CBC_VERSION; }

const char* coinclp() { return CLP_VERSION; }

}  // namespace version
}  // namespace cyclus
