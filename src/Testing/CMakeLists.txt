# Find tests generated in the binary directory
message("GENERATED TESTS DIR ${CMAKE_CURRENT_BINARY_DIR}")
message("GENERATED TESTS ${GENERATED_FILTER_LIST}")

# To add a new file, just add it to this list.  Any GoogleTests inside will be automatically
# added to ctest.
set ( TestSource
  MaterialTests.cpp
  BookKeeperTests.cpp
  LogicianTests.cpp
  MessageTests.cpp
  GenericRepositoryTests.cpp
  ../Models/Facility/SourceFacility.cpp
  Models/Facility/SourceFacilityTests.cpp
  ../InputXML.cpp
  ../Logician.cpp
  ../Material.cpp
  ../Commodity.cpp
  ../Message.cpp
  ../Utility/BookKeeper.cpp
  ../Utility/Env.cpp
  ../Utility/CycException.cpp 
  ../Utility/LMatrix.cpp
  ../Utility/MassTable.cpp
  ../Utility/Timer.cpp
  ../Utility/UniformTaylor.cpp
  ../Utility/Logger.cpp
  ../Models/Model.cpp 
  ../Models/StubTimeAgent.cpp 
  ../Models/StubModel.cpp 
  ../Models/StubCommModel.cpp 
  ../Models/ConverterModel.cpp 
  ../Models/MarketModel.cpp 
  ../Models/FacilityModel.cpp 
  ../Models/RegionModel.cpp
  ../Models/InstModel.cpp
  )

#file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/TestingTests)

# Build Google Test
find_package(Threads)
if (CMAKE_USE_PTHREADS_INIT)  # The pthreads library is available.
  set(cxx_base_flags "${cxx_base_flags} -DGTEST_HAS_PTHREAD=1")
endif()

# The gtest include file directories.
SET(GTEST_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/GoogleTest" PARENT_SCOPE)

# The gtest library directories.
SET(GTEST_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}" PARENT_SCOPE)

# Set some variables
#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CyclusTestHarnessPaths.h.in
#               ${CMAKE_CURRENT_BINARY_DIR}/CyclusTestHarnessPaths.h ESCAPE_QUOTES)

# Build Google Testing
set ( GTestSource
  GoogleTest/gtest/gtest-all.cc
)
include_directories ( GoogleTest ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

add_library(gtest ${GTestSource})
link_libraries(gtest)
if (CMAKE_USE_PTHREADS_INIT)
  target_link_libraries(gtest ${CMAKE_THREAD_LIBS_INIT})
endif()

include_directories ( ${CYCLUS_INCLUDE_DIR} )

add_executable(CyclusUnitTestDriver
  CyclusUnitTestDriver.cpp ${TestSource}
  ${GENERATED_TEST_SOURCE}
)
target_link_libraries ( CyclusUnitTestDriver dl ${CYCLUS_LIBRARIES} dl ${LIBS} hdf5 hdf5_hl hdf5_cpp)

# Add all the tests by parsing the source code
# This macro searches for GoogleTest macros and adds them as test automatically
macro(ADD_GOOGLE_TESTS executable)
  # Add the generated tests
  set ( AllTestsHits ${GENERATED_TEST_LIST} )
  set ( LongTestsHits "" )

  foreach ( source ${ARGN} )
    file(READ "${source}" contents)

    # Find all test and long test lists
    string(REGEX MATCHALL "TEST_?F?\\(([A-Za-z_0-9 ,_]+)\\) /\\* Long \\*/" LongTests ${contents})
    string(REGEX MATCHALL "TEST_?F?\\(([A-Za-z_0-9 ,_]+)\\)" AllTests ${contents})

    # Convert the C++ code into a short test name
    foreach(hit ${AllTests})
      string(REGEX REPLACE ".*\\(( *[A-Za-z_0-9]+)[, ]*([A-Za-z_0-9]+) *\\).*" "\\1.\\2" test_name ${hit})
      set ( AllTestsHits ${AllTestsHits} ${test_name} )
    endforeach()
    foreach(hit ${LongTests})
      string(REGEX REPLACE ".*\\(( *[A-Za-z_0-9]+)[, ]*([A-Za-z_0-9]+) *\\).*" "\\1.\\2" test_name ${hit})
      set ( LongTestsHits ${LongTestsHits} ${test_name} )
    endforeach()
  endforeach()

  # If we are not running the long tests, remove them from the AllTests list
  if ( NOT RUN_LONG_TESTS )
    foreach ( test ${LongTestsHits} )
      list ( REMOVE_ITEM AllTestsHits ${test} )
    endforeach()
  endif ()


  list ( SORT AllTestsHits )
  # Add all the remaining tests to CTest's test list
  foreach(hit ${AllTestsHits})
    add_test(${hit} ${executable} --gtest_filter=${hit})
  endforeach()
endmacro()



# Here we add all the tests
add_google_tests ( ${EXECUTABLE_OUTPUT_PATH}/CyclusUnitTestDriver ${TestSource})

