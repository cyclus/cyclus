// Env.cpp
#include "Logger.h"

#include <sys/stat.h>
#include <vector>
#include <string>
#include <cstring>
#include <utility>
#include "boost/algorithm/string.hpp"
#include "boost/filesystem.hpp"

#include "Env.h"

namespace fs = boost::filesystem;

namespace cyclus {

fs::path Env::path_from_cwd_to_cyclus_;
fs::path Env::cwd_ = fs::current_path();

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// note that this is not used - Env is a pure static class

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
std::string Env::PathBase(std::string path) {
  std::string base;
  int index;

  index = path.rfind("/");
  base = path.substr(0, index);
  return base;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
std::string Env::GetCyclusPath() {
  // return the join of cwd_ and rel path to cyclus
  fs::path path;
  if (path_from_cwd_to_cyclus_.has_root_path()) {
    path = path_from_cwd_to_cyclus_.normalize();
  } else {
    path = (cwd_ / path_from_cwd_to_cyclus_).normalize();
  }
  CLOG(LEV_DEBUG4) << "Cyclus absolute path retrieved: "
                   <<  path.string();
  return path.string();
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::GetInstallPath() {
  // return the join of cwd_ and rel path to cyclus MINUS the bin directory
  std::string to_ret = "@cyclus_install_dir@";
  return to_ret;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::GetBuildPath() {
  // return the join of cwd_ and rel path to cyclus MINUS the bin directory
  std::string to_ret = "@cyclus_build_dir@";
  return to_ret;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
void Env::SetCyclusRelPath(std::string path) {
  path_from_cwd_to_cyclus_ = fs::path(path);
  CLOG(LEV_DEBUG3) << "Cyclus rel path: " << path;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
std::string Env::CheckEnv(std::string varname) {
  char* pVar = getenv(varname.c_str());
  if (pVar == NULL) {
    return "";
  }
  return pVar;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::EnvDelimiter() {
#if _WIN32
  return ";";
#else
  return ":";
#endif
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::PathDelimiter() {
#if _WIN32
  return "\\";
#else
  return "/";
#endif
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::ModuleEnvVarName() {
  return std::string("CYCLUS_MODULE_PATH");
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::ModuleEnvVar() {
  char* value = getenv(ModuleEnvVarName().c_str());
  if (value != NULL) {
    return std::string(value);
  }
  return "";
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bool Env::FindModuleLib(const std::string name, boost::filesystem::path& path_found) {
  // explicitly check the install path first
  bool found = FindFile(GetInstallPath(), name, path_found); 

  // append env var dirs
  std::vector<std::string> dirs;
  boost::split(dirs, ModuleEnvVar(), boost::is_any_of(EnvDelimiter()), boost::token_compress_on);

  // check dirs other than install path if not found
  std::vector<std::string>::iterator it = dirs.begin();
  while (!found && it != dirs.end()) {
    found = FindFile(*it, name, path_found);
    ++it;
  }
  return found;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bool Env::FindFile(const boost::filesystem::path& dir_path,
                   const std::string& file_name,
                   boost::filesystem::path& path_found) {
  fs::recursive_directory_iterator it;
  try {
    it = fs::recursive_directory_iterator(dir_path);
  } catch (boost::filesystem::filesystem_error err) {
    return false;
  }

  while (it != fs::recursive_directory_iterator()) {
    if (it->path().filename() == file_name) {
      path_found = it->path();
      return true;
    }
    it++;
  }
  return false;
}

} // namespace cyclus
