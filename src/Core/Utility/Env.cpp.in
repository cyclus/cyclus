// Env.cpp
#include "Env.h"

#include "Logger.h"

#include <sys/stat.h>
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <utility>

using namespace std;
namespace fs = boost::filesystem;

fs::path Env::path_from_cwd_to_cyclus_;
fs::path Env::cwd_ = fs::current_path();

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// note that this is not used - Env is a pure static class

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
string Env::pathBase(std::string path) {
  string base;
  int index;

  index = path.rfind("/");
  base = path.substr(0, index);
  return base;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
string Env::getCyclusPath() {
  // return the join of cwd_ and rel path to cyclus
  fs::path path;
  if(path_from_cwd_to_cyclus_.has_root_path()) {
    path = path_from_cwd_to_cyclus_.normalize();
  } else {
    path = (cwd_ / path_from_cwd_to_cyclus_).normalize();
  }
  CLOG(LEV_DEBUG4) << "Cyclus absolute path retrieved: " 
                  <<  path.string();
  return path.string();
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const string Env::getInstallPath() {
  // return the join of cwd_ and rel path to cyclus MINUS the bin directory
  string to_ret = "@cyclus_install_dir@";
  return to_ret;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const string Env::getBuildPath() {
  // return the join of cwd_ and rel path to cyclus MINUS the bin directory
  string to_ret = "@cyclus_build_dir@";
  return to_ret;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
void Env::setCyclusRelPath(std::string path) {
  path_from_cwd_to_cyclus_ = fs::path(path);
  CLOG(LEV_DEBUG3) << "Cyclus rel path: " << path;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
string Env::checkEnv(std::string varname) {
  char* pVar = getenv (varname.c_str());
  if (pVar == NULL) {
    throw CycNoEnvVarException("Environment variable " + varname + " not set.");
  } else if (strlen(pVar) == 0) {
    throw CycNoEnvVarException("Environment variable " + varname
                               + " set to an empty string.");
  }
  return pVar;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::envDelimeter() {
#if _WIN32 
  return ";";
#else
  return ":";
#endif
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::pathDelimeter() {
#if _WIN32 
  return "\\";
#else
  return "/";
#endif
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const std::string Env::moduleEnvVar() {
  string ret;
  char* value = getenv("CYCLUS_MODULE_PATH");
  if (value != NULL)
    ret = string(value);
  return ret;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bool Env::findLib(const std::string name, boost::filesystem::path &path_found) {
  bool found = false;
  vector<string> dirs;
  dirs.push_back(getInstallPath());
  Env::split(moduleEnvVar(),envDelimeter()[0],dirs); // append env var dirs
  vector<string>::iterator it = dirs.begin();
  while (!found && it != dirs.end()) {
    found = (find_file(fs::path(*it),name,path_found)) ? true: false;  
    ++it;
  }
  return found;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bool Env::find_file(const boost::filesystem::path &dir_path,
                    const std::string & file_name,
                    boost::filesystem::path & path_found)
{
  if ( !exists( dir_path ) ) return false;
  fs::directory_iterator end_itr; // default construction yields past-the-end
  for ( fs::directory_iterator itr( dir_path );
        itr != end_itr;
        ++itr )
    {
      if ( is_directory( *itr ) )
        {
          if ( find_file( *itr, file_name, path_found ) ) return true;
        }
      else if ( itr->leaf() == file_name ) 
        {
          path_found = *itr;
          return true;
        }
    }
  return false;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
std::vector<std::string>& Env::split(const std::string &s, char delim,
                                     std::vector<std::string>& elems) {
  stringstream ss(s);
  string item;
  while (getline(ss, item, delim)) {
    elems.push_back(item);
  }
  return elems;
}
